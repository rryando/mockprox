{
  "openapi": "3.1.0",
  "info": {
    "title": "CRM Combined API",
    "version": "1.0.0",
    "description": "Combined OpenAPI specification for CRM services"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "CRM Mock Server - Development"
    }
  ],
  "paths": {
    "/api/v1/contacts/connect": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-management"
        ],
        "summary": "Get Contact Information",
        "description": "Retrieves contact information by connect contact ID",
        "operationId": "getContactInformation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connectContactId": {
                    "type": "string",
                    "description": "The AWS Connect contact ID"
                  }
                },
                "required": [
                  "connectContactId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "recordType": {
                          "type": "string"
                        },
                        "channel": {
                          "type": "string"
                        },
                        "requesterIdentifier": {
                          "type": "string"
                        },
                        "contactGroupId": {
                          "type": "string"
                        },
                        "caseId": {
                          "type": "string"
                        },
                        "isSpam": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts/profile": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-management"
        ],
        "summary": "Get Profile Information",
        "description": "Retrieves profile information for a contact",
        "operationId": "getProfileInformation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactProfileId": {
                    "type": "string",
                    "nullable": true,
                    "description": "The contact profile ID"
                  },
                  "caseProfileId": {
                    "type": "string",
                    "nullable": true,
                    "description": "The case profile ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "travelokaProfileId": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "paylaterUserId": {
                          "type": "integer",
                          "format": "int64",
                          "nullable": true
                        },
                        "profilePhoneNumber": {
                          "type": "string",
                          "nullable": true
                        },
                        "profileEmailAddress": {
                          "type": "string",
                          "nullable": true
                        },
                        "profileName": {
                          "type": "string"
                        },
                        "userTierLabel": {
                          "type": "string"
                        },
                        "priority": {
                          "type": "string"
                        },
                        "profileConsistency": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contact-groups/agents": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-group-operations"
        ],
        "summary": "Get All Assigned Agents on Case",
        "description": "Retrieves all agents assigned based on contact group IDs",
        "operationId": "getAllAssignedAgentOnCase",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactGroupIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of contact group IDs to get agents for"
                  }
                },
                "required": [
                  "contactGroupIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assigned agents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "agentInfos": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "agentName": {
                                "type": "string"
                              },
                              "agentId": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}": {
      "get": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Get Case Information",
        "description": "Retrieves comprehensive case information by case ID",
        "operationId": "getCaseInformation",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "caseNumber": {
                          "type": "string"
                        },
                        "caseStatus": {
                          "type": "string"
                        },
                        "category1": {
                          "type": "string"
                        },
                        "category2": {
                          "type": "string"
                        },
                        "category3": {
                          "type": "string"
                        },
                        "originCountry": {
                          "type": "string"
                        },
                        "productAffected": {
                          "type": "string"
                        },
                        "bookingId": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "recordType": {
                          "type": "string"
                        },
                        "resolution1": {
                          "type": "string"
                        },
                        "resolution2": {
                          "type": "string"
                        },
                        "relatedContactGroupIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "caseSla": {
                          "type": "object",
                          "properties": {
                            "slaName": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "targetSla": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "startTime": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "isActive": {
                              "type": "boolean"
                            }
                          }
                        },
                        "caseProfileId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/internal-notes": {
      "get": {
        "tags": [
          "crm-client-focused: legacy-improved",
          "crm-client-focused: case-management"
        ],
        "summary": "Get Agent Internal Notes (Improved)",
        "description": "Retrieves internal notes for a case - improved from legacy POST endpoint",
        "operationId": "getAgentInternalNotesImproved",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of notes to retrieve",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for pagination",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Internal notes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "notes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "caseId": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              },
                              "authorId": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        },
                        "totalCount": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/field-values": {
      "get": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Get Case Field Values",
        "description": "Retrieves available field values for case forms",
        "operationId": "getCaseFieldValues",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case field values retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "statusValue": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "productAffectedValues": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resolution1Values": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resolution2Values": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/search": {
      "get": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Search Cases",
        "description": "Searches for cases based on criteria",
        "operationId": "searchCaseTool",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Pagination token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "caseNumber",
            "in": "query",
            "description": "Case number to search for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cases found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "caseId": {
                                "type": "string"
                              },
                              "caseNumber": {
                                "type": "string"
                              },
                              "recordType": {
                                "type": "string"
                              },
                              "productAffected": {
                                "type": "string"
                              },
                              "category2": {
                                "type": "string"
                              },
                              "category3": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "nextToken": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts/{contactId}/response-rate-target": {
      "get": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-management"
        ],
        "summary": "Get Response Rate Target SLA",
        "description": "Retrieves response rate target SLA for a contact",
        "operationId": "getResponseRateTargetSLA",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The contact ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response rate target retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "responseRateTargetSla": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contact-groups/{contactGroupId}/spam": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-group-operations"
        ],
        "summary": "Mark Contact Group As Spam",
        "description": "Marks a contact group as spam or removes spam marking",
        "operationId": "markContactAsSpam",
        "parameters": [
          {
            "name": "contactGroupId",
            "in": "path",
            "description": "The contact group ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactGroupId": {
                    "type": "string",
                    "description": "The contact group ID (also available in path param)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Spam status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "isSpam": {
                          "type": "boolean"
                        },
                        "success": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/validation/booking-id": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: validation"
        ],
        "summary": "Validate Booking ID",
        "description": "Validates a booking ID and retrieves associated information",
        "operationId": "validateBookingId",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bookingId": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                "required": [
                  "bookingId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking validation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "productAffected": {
                          "type": "string"
                        },
                        "travelokaProfileId": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "profile": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "userTierLabel": {
                              "type": "string"
                            },
                            "userTierCountry": {
                              "type": "string"
                            },
                            "vipLabel": {
                              "type": "string"
                            },
                            "travelokaPaylaterId": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contact-groups/email/activity-feed": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-group-operations",
          "crm-client-focused: email-operations"
        ],
        "summary": "Get Email Activity Feed",
        "description": "Retrieves email activity feed for contact groups",
        "operationId": "getEmailActivityFeed",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactGroupIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of contact group IDs to filter by"
                  },
                  "defaultContactGroupId": {
                    "type": "string",
                    "nullable": true,
                    "description": "Default contact group ID"
                  }
                },
                "required": [
                  "contactGroupIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email activity feed retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "emails": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "contactGroupId": {
                                "type": "string"
                              },
                              "emailContactId": {
                                "type": "string"
                              },
                              "contactType": {
                                "type": "string",
                                "enum": [
                                  "INBOUND",
                                  "OUTBOUND"
                                ]
                              },
                              "senderType": {
                                "type": "string",
                                "enum": [
                                  "CUSTOMER",
                                  "PARTNER"
                                ]
                              },
                              "createdDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "subject": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              },
                              "from": {
                                "type": "string"
                              },
                              "to": {
                                "type": "string"
                              },
                              "cc": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "bcc": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "replyMetadata": {
                                "type": "object",
                                "properties": {
                                  "from": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "cc": {
                                    "type": "string"
                                  },
                                  "bcc": {
                                    "type": "string"
                                  },
                                  "emailContactId": {
                                    "type": "string"
                                  }
                                }
                              },
                              "attachments": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "emailDestinations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "from": {
                                "type": "string"
                              },
                              "to": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "emailSenders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "responseRate": {
                          "nullable": true,
                          "type": "object",
                          "properties": {
                            "latestActor": {
                              "type": "string",
                              "enum": [
                                "AGENT",
                                "CUSTOMER",
                                "PARTNER"
                              ]
                            },
                            "startTime": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "sendTime": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts/email/send-outbound": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: email-operations"
        ],
        "summary": "Send Email Outbound",
        "description": "Sends an outbound email",
        "operationId": "sendEmailOutbound",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "object",
                    "properties": {
                      "subject": {
                        "type": "string"
                      },
                      "from": {
                        "type": "string"
                      },
                      "to": {
                        "type": "string"
                      },
                      "cc": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "bcc": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "inReplyTo": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "senderName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "subject",
                      "from",
                      "to",
                      "cc",
                      "bcc",
                      "content",
                      "senderName"
                    ]
                  },
                  "attachmentKeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "caseId": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "attachmentKeys",
                  "caseId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Outbound email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "contactGroupId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contact-groups/{contactGroupId}/sendbird/auth": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-group-operations"
        ],
        "summary": "Resolve User MC Authentication",
        "description": "Resolves user multi-channel authentication for Sendbird",
        "operationId": "resolveUserMCAuthentication",
        "parameters": [
          {
            "name": "contactGroupId",
            "in": "path",
            "description": "The contact group ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication resolved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "authKey": {
                          "type": "string",
                          "nullable": true
                        },
                        "sbUserId": {
                          "type": "string"
                        },
                        "sbChannelId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contact-groups/{contactGroupId}/sendbird/reply": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: contact-group-operations"
        ],
        "summary": "Send MC Reply",
        "description": "Sends a multi-channel reply via Sendbird",
        "operationId": "sendMCReply",
        "parameters": [
          {
            "name": "contactGroupId",
            "in": "path",
            "description": "The contact group ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactGroupId": {
                    "type": "string",
                    "description": "Contact group ID (also available in path param)"
                  },
                  "attachmentKeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of attachment keys"
                  },
                  "email": {
                    "type": "object",
                    "properties": {
                      "subject": {
                        "type": "string"
                      },
                      "from": {
                        "type": "string"
                      },
                      "to": {
                        "type": "string"
                      },
                      "cc": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "bcc": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "inReplyTo": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "senderName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "subject",
                      "from",
                      "to",
                      "cc",
                      "bcc",
                      "content",
                      "senderName"
                    ]
                  }
                },
                "required": [
                  "attachmentKeys",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MC reply sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/notes": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Post Internal Notes to Case",
        "description": "Posts internal notes to a case",
        "operationId": "postInternalNotesCase",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caseId": {
                    "type": "string",
                    "description": "Case ID (also available in path param)"
                  },
                  "contentBody": {
                    "type": "string"
                  },
                  "contentType": {
                    "type": "string"
                  }
                },
                "required": [
                  "contentBody",
                  "contentType"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal notes posted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Create Case If Not Exist",
        "description": "Creates a new case if one doesn't already exist for the given criteria",
        "operationId": "createCaseIfNotExist",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bookingId": {
                    "type": "integer",
                    "format": "int64",
                    "nullable": true
                  },
                  "contactProfileId": {
                    "type": "string"
                  },
                  "problemId": {
                    "type": "string"
                  },
                  "recordType": {
                    "type": "string"
                  },
                  "productAffected": {
                    "type": "string"
                  },
                  "contactId": {
                    "type": "string"
                  }
                },
                "required": [
                  "contactProfileId",
                  "problemId",
                  "recordType",
                  "productAffected",
                  "contactId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Case creation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "caseId": {
                          "type": "string"
                        },
                        "exist": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/contacts/link": {
      "post": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Associate Contact to Existing Case",
        "description": "Associates a contact with an existing case",
        "operationId": "associateContactToExistingCase",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactId": {
                    "type": "string"
                  },
                  "contactGroupId": {
                    "type": "string"
                  },
                  "caseId": {
                    "type": "string",
                    "description": "Case ID (also available in path param)"
                  }
                },
                "required": [
                  "contactId",
                  "contactGroupId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact associated to case successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/problem": {
      "put": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Update Case Problem Category",
        "description": "Updates the problem category ID for a case",
        "operationId": "updateCaseProblemCategoryId",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caseId": {
                    "type": "string",
                    "description": "Case ID (also available in path param)"
                  },
                  "problemId": {
                    "type": "string"
                  }
                },
                "required": [
                  "problemId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Case problem updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/resolution": {
      "put": {
        "tags": [
          "crm-client-focused: client-focused",
          "crm-client-focused: case-management"
        ],
        "summary": "Update Case Resolution",
        "description": "Updates the resolution values for a case",
        "operationId": "updateCaseResolution",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caseId": {
                    "type": "string",
                    "description": "Case ID (also available in path param)"
                  },
                  "resolution1Value": {
                    "type": "string"
                  },
                  "resolution2Value": {
                    "type": "string"
                  }
                },
                "required": [
                  "resolution1Value",
                  "resolution2Value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Case resolution updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crmdata/crm/internal-notes/": {
      "post": {
        "tags": [
          "crm-client-focused: legacy"
        ],
        "summary": "Get Agent Internal Notes (Legacy)",
        "description": "Legacy endpoint for retrieving internal notes - maintained for compatibility",
        "operationId": "getAgentInternalNotesLegacy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caseId": {
                    "type": "string",
                    "description": "The unique identifier of the case"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Number of notes to retrieve",
                    "default": 20
                  },
                  "offset": {
                    "type": "integer",
                    "description": "Offset for pagination",
                    "default": 0
                  }
                },
                "required": [
                  "caseId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal notes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "notes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "caseId": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              },
                              "authorId": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        },
                        "totalCount": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/contact/email/reply-outbound": {
      "post": {
        "tags": [
          "crm-client-focused: legacy"
        ],
        "summary": "Send Reply (Legacy)",
        "description": "Legacy endpoint for sending email replies - maintained for compatibility",
        "operationId": "sendReplyLegacy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Represents a request to send a reply email",
                "properties": {
                  "emailMessage": {
                    "description": "The body information of the email",
                    "type": "object",
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email"
                      },
                      "fromAddress": {
                        "type": "string",
                        "description": "The email address of the sender"
                      },
                      "fromName": {
                        "type": "string",
                        "description": "The name of the sender"
                      },
                      "toAddress": {
                        "type": "string",
                        "description": "The email address of the recipient"
                      },
                      "htmlTextBody": {
                        "type": "string",
                        "description": "The HTML text body of the email"
                      },
                      "plainTextBody": {
                        "type": "string",
                        "description": "The plain text body of the email"
                      },
                      "inReplyTo": {
                        "type": "string",
                        "description": "The message id to which this email is a reply"
                      },
                      "ccAddresses": {
                        "type": "array",
                        "description": "The list of email addresses to be included in the CC field",
                        "items": {
                          "type": "string"
                        }
                      },
                      "bccAddresses": {
                        "type": "array",
                        "description": "The list of email addresses to be included in the BCC field",
                        "items": {
                          "type": "string"
                        }
                      },
                      "s3Keys": {
                        "type": "array",
                        "description": "The list of the attachments' s3 keys",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "bccAddresses",
                      "ccAddresses",
                      "fromAddress",
                      "fromName",
                      "htmlTextBody",
                      "s3Keys",
                      "subject",
                      "toAddress"
                    ]
                  },
                  "contactGroupId": {
                    "type": "string",
                    "description": "Contact Group ID to be attached to the Contact",
                    "example": "102454"
                  }
                },
                "required": [
                  "contactGroupId",
                  "emailMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reply sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Represents a response to send a reply email",
                  "properties": {
                    "contactId": {
                      "type": "string",
                      "description": "Unique identifier for the created contact."
                    },
                    "emailMessageId": {
                      "type": "string",
                      "description": "Unique identifier for the created email message."
                    },
                    "contactGroupId": {
                      "type": "string",
                      "description": "Unique identifier for the created (or existing) contact group."
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "contactGroupId",
                    "contactId",
                    "emailMessageId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/contact/email/reply-outbound-improved": {
      "post": {
        "tags": [
          "crm-client-focused: legacy-improved"
        ],
        "summary": "Send Reply (Improved)",
        "description": "Improved version of reply endpoint with BaseCommonResult wrapper",
        "operationId": "sendReplyImproved",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Represents a request to send a reply email",
                "properties": {
                  "emailMessage": {
                    "description": "The body information of the email",
                    "type": "object",
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email"
                      },
                      "fromAddress": {
                        "type": "string",
                        "description": "The email address of the sender"
                      },
                      "fromName": {
                        "type": "string",
                        "description": "The name of the sender"
                      },
                      "toAddress": {
                        "type": "string",
                        "description": "The email address of the recipient"
                      },
                      "htmlTextBody": {
                        "type": "string",
                        "description": "The HTML text body of the email"
                      },
                      "plainTextBody": {
                        "type": "string",
                        "description": "The plain text body of the email"
                      },
                      "inReplyTo": {
                        "type": "string",
                        "description": "The message id to which this email is a reply"
                      },
                      "ccAddresses": {
                        "type": "array",
                        "description": "The list of email addresses to be included in the CC field",
                        "items": {
                          "type": "string"
                        }
                      },
                      "bccAddresses": {
                        "type": "array",
                        "description": "The list of email addresses to be included in the BCC field",
                        "items": {
                          "type": "string"
                        }
                      },
                      "s3Keys": {
                        "type": "array",
                        "description": "The list of the attachments' s3 keys",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "bccAddresses",
                      "ccAddresses",
                      "fromAddress",
                      "fromName",
                      "htmlTextBody",
                      "s3Keys",
                      "subject",
                      "toAddress"
                    ]
                  },
                  "contactGroupId": {
                    "type": "string",
                    "description": "Contact Group ID to be attached to the Contact",
                    "example": "102454"
                  }
                },
                "required": [
                  "contactGroupId",
                  "emailMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reply sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "description": "Represents a response to send a reply email",
                      "properties": {
                        "contactId": {
                          "type": "string",
                          "description": "Unique identifier for the created contact."
                        },
                        "emailMessageId": {
                          "type": "string",
                          "description": "Unique identifier for the created email message."
                        },
                        "contactGroupId": {
                          "type": "string",
                          "description": "Unique identifier for the created (or existing) contact group."
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "contactGroupId",
                        "contactId",
                        "emailMessageId"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/email-selections": {
      "get": {
        "tags": [
          "crm-client-focused: legacy-improved",
          "crm-client-focused: email-operations"
        ],
        "summary": "Retrieve Email Selections (Improved)",
        "description": "Improved version using GET instead of POST for retrieving email selections",
        "operationId": "retrieveEmailSelectionsImproved",
        "parameters": [
          {
            "name": "caseId",
            "in": "path",
            "description": "The case ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingContactEmail",
            "in": "query",
            "description": "The booking contact email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email selections retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "description": "Configuration for the \"from\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "to": {
                          "description": "Configuration for the \"to\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "freeText": {
                              "type": "boolean"
                            }
                          }
                        },
                        "cc": {
                          "description": "Configuration for the \"cc\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "freeText": {
                              "type": "boolean"
                            }
                          }
                        },
                        "bcc": {
                          "description": "Configuration for the \"bcc\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "freeText": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crmcore/crm/email-communication/get-email-selections": {
      "post": {
        "tags": [
          "crm-client-focused: legacy"
        ],
        "summary": "Retrieve Email Selections (Legacy)",
        "description": "Legacy endpoint for retrieving email selections - maintained for compatibility",
        "operationId": "retrieveEmailSelectionsLegacy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caseId": {
                    "type": "string",
                    "description": "The unique identifier of the case."
                  },
                  "bookingContactEmail": {
                    "type": "string",
                    "description": "The booking contact email of the case."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email selections retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "description": "Configuration for the \"from\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "to": {
                          "description": "Configuration for the \"to\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "freeText": {
                              "type": "boolean"
                            }
                          }
                        },
                        "cc": {
                          "description": "Configuration for the \"cc\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "freeText": {
                              "type": "boolean"
                            }
                          }
                        },
                        "bcc": {
                          "description": "Configuration for the \"bcc\" email header field.",
                          "type": "object",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "description": "List of email address.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "freeText": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/categories/search": {
      "get": {
        "tags": [
          "crm-client-focused: legacy-improved",
          "crm-client-focused: case-management"
        ],
        "summary": "Search Case Categories (Improved)",
        "description": "Improved version with cleaner URL structure",
        "operationId": "searchCaseCategoriesImproved",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "description": "Keyword to search categories",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "originCountry",
            "in": "query",
            "description": "Origin country filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productAffected",
            "in": "query",
            "description": "Product affected filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordType",
            "in": "query",
            "description": "Record type filter",
            "schema": {
              "type": "string",
              "enum": [
                "PARTNER",
                "CUSTOMER",
                "AFFILIATE"
              ]
            }
          },
          {
            "name": "customerPriority",
            "in": "query",
            "description": "Customer priority filter",
            "schema": {
              "type": "string",
              "enum": [
                "VVIP",
                "VIP",
                "REGULAR"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "problemCategories": {
                          "type": "array",
                          "description": "List of problem categories matching the search criteria.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "problemId": {
                                "type": "string",
                                "description": "The unique identifier of the problem category details.",
                                "example": "info_refund_001"
                              },
                              "category1": {
                                "type": "string",
                                "description": "The first category of the problem category details.",
                                "example": "Info"
                              },
                              "category2": {
                                "type": "string",
                                "description": "The second category of the problem category details.",
                                "example": "Refund"
                              },
                              "category3": {
                                "type": "string",
                                "description": "The third category of the problem category details. Might be null.",
                                "example": "Delay"
                              },
                              "originCountry": {
                                "type": "string",
                                "description": "Origin country of the case or the problem that identified. The country should be in full name format.",
                                "example": "Indonesia"
                              },
                              "productAffected": {
                                "type": "string",
                                "description": "Product affected by the case or the problem that identified. The product should be in code format that already defined in existing CRM.",
                                "example": "AC-Hotel"
                              },
                              "recordType": {
                                "type": "string",
                                "description": "Record type of the case or the problem that identified.",
                                "enum": [
                                  "PARTNER",
                                  "CUSTOMER",
                                  "AFFILIATE"
                                ],
                                "example": "CUSTOMER"
                              },
                              "customerPriority": {
                                "type": "string",
                                "description": "Customer priority of the case or the problem that identified.",
                                "enum": [
                                  "VVIP",
                                  "VIP",
                                  "REGULAR"
                                ],
                                "example": "VVIP"
                              },
                              "targetSla": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The target sla of combination of the above attributes in minutes.",
                                "example": 1440
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crmcore/crm/categorization/search": {
      "get": {
        "tags": [
          "crm-client-focused: legacy"
        ],
        "summary": "Search Case Categories (Legacy)",
        "description": "Legacy endpoint for searching case categories - maintained for compatibility",
        "operationId": "searchCaseCategoriesLegacy",
        "parameters": [
          {
            "name": "categoryRequest",
            "in": "query",
            "description": "The search criteria for finding case categories",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keyword": {
                  "type": "string",
                  "description": "Attribute to contain keyword to be searched by Full text search.",
                  "example": "refund"
                },
                "originCountry": {
                  "type": "string",
                  "description": "Origin country of the case or the problem that identified. The country should be in full name format.",
                  "example": "Indonesia"
                },
                "productAffected": {
                  "type": "string",
                  "description": "Product affected by the case or the problem that identified. The product should be in code format that already defined in existing CRM.",
                  "example": "AC-Hotel"
                },
                "recordType": {
                  "type": "string",
                  "description": "Record type of the case or the problem that identified.",
                  "enum": [
                    "PARTNER",
                    "CUSTOMER",
                    "AFFILIATE"
                  ],
                  "example": "CUSTOMER"
                },
                "customerPriority": {
                  "type": "string",
                  "description": "Customer priority of the case or the problem that identified.",
                  "enum": [
                    "VVIP",
                    "VIP",
                    "REGULAR"
                  ],
                  "example": "VVIP"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStatus": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ]
                    },
                    "errorType": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ],
                          "enum": [
                            "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                            "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                            "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                            "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "type"
                              },
                              "properties": {
                                "httpStatusCode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "commonErrorType": {
                                  "type": "string",
                                  "enum": [
                                    "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                                    "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                                    "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                                    "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "problemCategories": {
                          "type": "array",
                          "description": "List of problem categories matching the search criteria.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "problemId": {
                                "type": "string",
                                "description": "The unique identifier of the problem category details.",
                                "example": "info_refund_001"
                              },
                              "category1": {
                                "type": "string",
                                "description": "The first category of the problem category details.",
                                "example": "Info"
                              },
                              "category2": {
                                "type": "string",
                                "description": "The second category of the problem category details.",
                                "example": "Refund"
                              },
                              "category3": {
                                "type": "string",
                                "description": "The third category of the problem category details. Might be null.",
                                "example": "Delay"
                              },
                              "originCountry": {
                                "type": "string",
                                "description": "Origin country of the case or the problem that identified. The country should be in full name format.",
                                "example": "Indonesia"
                              },
                              "productAffected": {
                                "type": "string",
                                "description": "Product affected by the case or the problem that identified. The product should be in code format that already defined in existing CRM.",
                                "example": "AC-Hotel"
                              },
                              "recordType": {
                                "type": "string",
                                "description": "Record type of the case or the problem that identified.",
                                "enum": [
                                  "PARTNER",
                                  "CUSTOMER",
                                  "AFFILIATE"
                                ],
                                "example": "CUSTOMER"
                              },
                              "customerPriority": {
                                "type": "string",
                                "description": "Customer priority of the case or the problem that identified.",
                                "enum": [
                                  "VVIP",
                                  "VIP",
                                  "REGULAR"
                                ],
                                "example": "VVIP"
                              },
                              "targetSla": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The target sla of combination of the above attributes in minutes.",
                                "example": 1440
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid request parameters provided"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 401,
                  "message": "Authentication token is missing or invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 404,
                  "message": "The requested resource was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid request parameters"
                    }
                  },
                  "description": "Generic error response structure"
                },
                "example": {
                  "status": 500,
                  "message": "An unexpected error occurred while processing your request"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Invalid request parameters"
          }
        },
        "description": "Generic error response structure"
      },
      "BaseCommonResult": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "BaseCommonResultVoid": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "CommonErrorType": {
        "allOf": [
          {
            "type": "object",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "httpStatusCode": {
                "type": "integer",
                "format": "int32"
              },
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "enum": [
          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
        ]
      },
      "CustomErrorType": {
        "allOf": [
          {
            "type": "object",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "httpStatusCode": {
                "type": "integer",
                "format": "int32"
              },
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "commonErrorType": {
                "type": "string",
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              }
            }
          }
        ]
      },
      "ErrorType": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "ContactInformationRequest": {
        "type": "object",
        "properties": {
          "connectContactId": {
            "type": "string",
            "description": "The AWS Connect contact ID"
          }
        },
        "required": [
          "connectContactId"
        ]
      },
      "BaseCommonResultContactInformationResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "recordType": {
                "type": "string"
              },
              "channel": {
                "type": "string"
              },
              "requesterIdentifier": {
                "type": "string"
              },
              "contactGroupId": {
                "type": "string"
              },
              "caseId": {
                "type": "string"
              },
              "isSpam": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "ContactInformationResponse": {
        "type": "object",
        "properties": {
          "recordType": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "requesterIdentifier": {
            "type": "string"
          },
          "contactGroupId": {
            "type": "string"
          },
          "caseId": {
            "type": "string"
          },
          "isSpam": {
            "type": "boolean"
          }
        }
      },
      "ProfileInformationRequest": {
        "type": "object",
        "properties": {
          "contactProfileId": {
            "type": "string",
            "nullable": true,
            "description": "The contact profile ID"
          },
          "caseProfileId": {
            "type": "string",
            "nullable": true,
            "description": "The case profile ID"
          }
        }
      },
      "BaseCommonResultProfileInformationResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "travelokaProfileId": {
                "type": "integer",
                "format": "int64"
              },
              "paylaterUserId": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "profilePhoneNumber": {
                "type": "string",
                "nullable": true
              },
              "profileEmailAddress": {
                "type": "string",
                "nullable": true
              },
              "profileName": {
                "type": "string"
              },
              "userTierLabel": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "profileConsistency": {
                "type": "string"
              }
            }
          }
        }
      },
      "ProfileInformationResponse": {
        "type": "object",
        "properties": {
          "travelokaProfileId": {
            "type": "integer",
            "format": "int64"
          },
          "paylaterUserId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "profilePhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "profileEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "profileName": {
            "type": "string"
          },
          "userTierLabel": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "profileConsistency": {
            "type": "string"
          }
        }
      },
      "GetAssignedAgentsRequest": {
        "type": "object",
        "properties": {
          "contactGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of contact group IDs to get agents for"
          }
        },
        "required": [
          "contactGroupIds"
        ]
      },
      "BaseCommonResultAssignedAgentsResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "agentInfos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "agentName": {
                      "type": "string"
                    },
                    "agentId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AssignedAgentsResponse": {
        "type": "object",
        "properties": {
          "agentInfos": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "agentName": {
                  "type": "string"
                },
                "agentId": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "AgentInfo": {
        "type": "object",
        "properties": {
          "agentName": {
            "type": "string"
          },
          "agentId": {
            "type": "string"
          }
        }
      },
      "BaseCommonResultCaseInformationResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "caseNumber": {
                "type": "string"
              },
              "caseStatus": {
                "type": "string"
              },
              "category1": {
                "type": "string"
              },
              "category2": {
                "type": "string"
              },
              "category3": {
                "type": "string"
              },
              "originCountry": {
                "type": "string"
              },
              "productAffected": {
                "type": "string"
              },
              "bookingId": {
                "type": "integer",
                "format": "int64"
              },
              "recordType": {
                "type": "string"
              },
              "resolution1": {
                "type": "string"
              },
              "resolution2": {
                "type": "string"
              },
              "relatedContactGroupIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "caseSla": {
                "type": "object",
                "properties": {
                  "slaName": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "targetSla": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                }
              },
              "caseProfileId": {
                "type": "string"
              }
            }
          }
        }
      },
      "CaseInformationResponse": {
        "type": "object",
        "properties": {
          "caseNumber": {
            "type": "string"
          },
          "caseStatus": {
            "type": "string"
          },
          "category1": {
            "type": "string"
          },
          "category2": {
            "type": "string"
          },
          "category3": {
            "type": "string"
          },
          "originCountry": {
            "type": "string"
          },
          "productAffected": {
            "type": "string"
          },
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "recordType": {
            "type": "string"
          },
          "resolution1": {
            "type": "string"
          },
          "resolution2": {
            "type": "string"
          },
          "relatedContactGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "caseSla": {
            "type": "object",
            "properties": {
              "slaName": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "targetSla": {
                "type": "integer",
                "format": "int32"
              },
              "startTime": {
                "type": "string",
                "format": "date-time"
              },
              "isActive": {
                "type": "boolean"
              }
            }
          },
          "caseProfileId": {
            "type": "string"
          }
        }
      },
      "CaseSla": {
        "type": "object",
        "properties": {
          "slaName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "targetSla": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "BaseCommonResultCaseFieldValuesResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "statusValue": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "productAffectedValues": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resolution1Values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resolution2Values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CaseFieldValuesResponse": {
        "type": "object",
        "properties": {
          "statusValue": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productAffectedValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resolution1Values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resolution2Values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BaseCommonResultCaseSearchToolResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "caseId": {
                      "type": "string"
                    },
                    "caseNumber": {
                      "type": "string"
                    },
                    "recordType": {
                      "type": "string"
                    },
                    "productAffected": {
                      "type": "string"
                    },
                    "category2": {
                      "type": "string"
                    },
                    "category3": {
                      "type": "string"
                    }
                  }
                }
              },
              "nextToken": {
                "type": "string"
              }
            }
          }
        }
      },
      "CaseSearchToolResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "caseId": {
                  "type": "string"
                },
                "caseNumber": {
                  "type": "string"
                },
                "recordType": {
                  "type": "string"
                },
                "productAffected": {
                  "type": "string"
                },
                "category2": {
                  "type": "string"
                },
                "category3": {
                  "type": "string"
                }
              }
            }
          },
          "nextToken": {
            "type": "string"
          }
        }
      },
      "CaseSearchResult": {
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string"
          },
          "caseNumber": {
            "type": "string"
          },
          "recordType": {
            "type": "string"
          },
          "productAffected": {
            "type": "string"
          },
          "category2": {
            "type": "string"
          },
          "category3": {
            "type": "string"
          }
        }
      },
      "BaseCommonResultResponseRateTargetResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "responseRateTargetSla": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "ResponseRateTargetResponse": {
        "type": "object",
        "properties": {
          "responseRateTargetSla": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MarkSpamRequest": {
        "type": "object",
        "properties": {
          "contactGroupId": {
            "type": "string",
            "description": "The contact group ID (also available in path param)"
          }
        }
      },
      "BaseCommonResultSpamResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "isSpam": {
                "type": "boolean"
              },
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "SpamResponse": {
        "type": "object",
        "properties": {
          "isSpam": {
            "type": "boolean"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "BookingValidationRequest": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bookingId"
        ]
      },
      "BaseCommonResultBookingValidationResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "productAffected": {
                "type": "string"
              },
              "travelokaProfileId": {
                "type": "integer",
                "format": "int64"
              },
              "profile": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "userTierLabel": {
                    "type": "string"
                  },
                  "userTierCountry": {
                    "type": "string"
                  },
                  "vipLabel": {
                    "type": "string"
                  },
                  "travelokaPaylaterId": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "BookingValidationResponse": {
        "type": "object",
        "properties": {
          "productAffected": {
            "type": "string"
          },
          "travelokaProfileId": {
            "type": "integer",
            "format": "int64"
          },
          "profile": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "userTierLabel": {
                "type": "string"
              },
              "userTierCountry": {
                "type": "string"
              },
              "vipLabel": {
                "type": "string"
              },
              "travelokaPaylaterId": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      },
      "BookingProfile": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userTierLabel": {
            "type": "string"
          },
          "userTierCountry": {
            "type": "string"
          },
          "vipLabel": {
            "type": "string"
          },
          "travelokaPaylaterId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EmailActivityFeedRequest": {
        "type": "object",
        "properties": {
          "contactGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of contact group IDs to filter by"
          },
          "defaultContactGroupId": {
            "type": "string",
            "nullable": true,
            "description": "Default contact group ID"
          }
        },
        "required": [
          "contactGroupIds"
        ]
      },
      "BaseCommonResultEmailActivityFeedResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "emails": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "contactGroupId": {
                      "type": "string"
                    },
                    "emailContactId": {
                      "type": "string"
                    },
                    "contactType": {
                      "type": "string",
                      "enum": [
                        "INBOUND",
                        "OUTBOUND"
                      ]
                    },
                    "senderType": {
                      "type": "string",
                      "enum": [
                        "CUSTOMER",
                        "PARTNER"
                      ]
                    },
                    "createdDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "subject": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "from": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    },
                    "cc": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "bcc": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "replyMetadata": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string"
                        },
                        "to": {
                          "type": "string"
                        },
                        "cc": {
                          "type": "string"
                        },
                        "bcc": {
                          "type": "string"
                        },
                        "emailContactId": {
                          "type": "string"
                        }
                      }
                    },
                    "attachments": {
                      "type": "string"
                    }
                  }
                }
              },
              "emailDestinations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    }
                  }
                }
              },
              "emailSenders": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "responseRate": {
                "nullable": true,
                "type": "object",
                "properties": {
                  "latestActor": {
                    "type": "string",
                    "enum": [
                      "AGENT",
                      "CUSTOMER",
                      "PARTNER"
                    ]
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "sendTime": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        }
      },
      "EmailActivityFeedResponse": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "contactGroupId": {
                  "type": "string"
                },
                "emailContactId": {
                  "type": "string"
                },
                "contactType": {
                  "type": "string",
                  "enum": [
                    "INBOUND",
                    "OUTBOUND"
                  ]
                },
                "senderType": {
                  "type": "string",
                  "enum": [
                    "CUSTOMER",
                    "PARTNER"
                  ]
                },
                "createdDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "subject": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "to": {
                  "type": "string"
                },
                "cc": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "bcc": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "replyMetadata": {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    },
                    "cc": {
                      "type": "string"
                    },
                    "bcc": {
                      "type": "string"
                    },
                    "emailContactId": {
                      "type": "string"
                    }
                  }
                },
                "attachments": {
                  "type": "string"
                }
              }
            }
          },
          "emailDestinations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "string"
                },
                "to": {
                  "type": "string"
                }
              }
            }
          },
          "emailSenders": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "responseRate": {
            "nullable": true,
            "type": "object",
            "properties": {
              "latestActor": {
                "type": "string",
                "enum": [
                  "AGENT",
                  "CUSTOMER",
                  "PARTNER"
                ]
              },
              "startTime": {
                "type": "string",
                "format": "date-time"
              },
              "sendTime": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "EmailActivity": {
        "type": "object",
        "properties": {
          "contactGroupId": {
            "type": "string"
          },
          "emailContactId": {
            "type": "string"
          },
          "contactType": {
            "type": "string",
            "enum": [
              "INBOUND",
              "OUTBOUND"
            ]
          },
          "senderType": {
            "type": "string",
            "enum": [
              "CUSTOMER",
              "PARTNER"
            ]
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "replyMetadata": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "cc": {
                "type": "string"
              },
              "bcc": {
                "type": "string"
              },
              "emailContactId": {
                "type": "string"
              }
            }
          },
          "attachments": {
            "type": "string"
          }
        }
      },
      "EmailDestination": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        }
      },
      "ResponseRate": {
        "type": "object",
        "properties": {
          "latestActor": {
            "type": "string",
            "enum": [
              "AGENT",
              "CUSTOMER",
              "PARTNER"
            ]
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "sendTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReplyMetadata": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "bcc": {
            "type": "string"
          },
          "emailContactId": {
            "type": "string"
          }
        }
      },
      "SendOutboundEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "object",
            "properties": {
              "subject": {
                "type": "string"
              },
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "cc": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "bcc": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "inReplyTo": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "senderName": {
                "type": "string"
              }
            },
            "required": [
              "subject",
              "from",
              "to",
              "cc",
              "bcc",
              "content",
              "senderName"
            ]
          },
          "attachmentKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "caseId": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "attachmentKeys",
          "caseId"
        ]
      },
      "EmailMessage": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inReplyTo": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          }
        },
        "required": [
          "subject",
          "from",
          "to",
          "cc",
          "bcc",
          "content",
          "senderName"
        ]
      },
      "BaseCommonResultSendEmailResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "contactGroupId": {
                "type": "string"
              }
            }
          }
        }
      },
      "SendEmailResponse": {
        "type": "object",
        "properties": {
          "contactGroupId": {
            "type": "string"
          }
        }
      },
      "BaseCommonResultSendbirdAuthResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "authKey": {
                "type": "string",
                "nullable": true
              },
              "sbUserId": {
                "type": "string"
              },
              "sbChannelId": {
                "type": "string"
              }
            }
          }
        }
      },
      "SendbirdAuthResponse": {
        "type": "object",
        "properties": {
          "authKey": {
            "type": "string",
            "nullable": true
          },
          "sbUserId": {
            "type": "string"
          },
          "sbChannelId": {
            "type": "string"
          }
        }
      },
      "SendbirdReplyRequest": {
        "type": "object",
        "properties": {
          "contactGroupId": {
            "type": "string",
            "description": "Contact group ID (also available in path param)"
          },
          "attachmentKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of attachment keys"
          },
          "email": {
            "type": "object",
            "properties": {
              "subject": {
                "type": "string"
              },
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "cc": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "bcc": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "inReplyTo": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "senderName": {
                "type": "string"
              }
            },
            "required": [
              "subject",
              "from",
              "to",
              "cc",
              "bcc",
              "content",
              "senderName"
            ]
          }
        },
        "required": [
          "attachmentKeys",
          "email"
        ]
      },
      "MCMessage": {
        "type": "object",
        "properties": {
          "textContent": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "language": {
                "type": "string"
              }
            }
          },
          "urlAttachment": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "attachmentType": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "TextContent": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "UrlAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "attachmentType": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SendbirdEmailMessage": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inReplyTo": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          }
        },
        "required": [
          "subject",
          "from",
          "to",
          "cc",
          "bcc",
          "content",
          "senderName"
        ]
      },
      "BaseCommonResultSendbirdReplyResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              }
            }
          }
        }
      },
      "SendbirdReplyResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "PostInternalNotesRequest": {
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string",
            "description": "Case ID (also available in path param)"
          },
          "contentBody": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          }
        },
        "required": [
          "contentBody",
          "contentType"
        ]
      },
      "BaseCommonResultPostNotesResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              }
            }
          }
        }
      },
      "PostNotesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "CreateCaseRequest": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "contactProfileId": {
            "type": "string"
          },
          "problemId": {
            "type": "string"
          },
          "recordType": {
            "type": "string"
          },
          "productAffected": {
            "type": "string"
          },
          "contactId": {
            "type": "string"
          }
        },
        "required": [
          "contactProfileId",
          "problemId",
          "recordType",
          "productAffected",
          "contactId"
        ]
      },
      "BaseCommonResultCreateCaseResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "caseId": {
                "type": "string"
              },
              "exist": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "CreateCaseResponse": {
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string"
          },
          "exist": {
            "type": "boolean"
          }
        }
      },
      "AssociateCaseContactRequest": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string"
          },
          "contactGroupId": {
            "type": "string"
          },
          "caseId": {
            "type": "string",
            "description": "Case ID (also available in path param)"
          }
        },
        "required": [
          "contactId",
          "contactGroupId"
        ]
      },
      "UpdateProblemRequest": {
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string",
            "description": "Case ID (also available in path param)"
          },
          "problemId": {
            "type": "string"
          }
        },
        "required": [
          "problemId"
        ]
      },
      "UpdateResolutionRequest": {
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string",
            "description": "Case ID (also available in path param)"
          },
          "resolution1Value": {
            "type": "string"
          },
          "resolution2Value": {
            "type": "string"
          }
        },
        "required": [
          "resolution1Value",
          "resolution2Value"
        ]
      },
      "GetPaginatedCaseInternalNotesRequest": {
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string",
            "description": "The unique identifier of the case"
          },
          "limit": {
            "type": "integer",
            "description": "Number of notes to retrieve",
            "default": 20
          },
          "offset": {
            "type": "integer",
            "description": "Offset for pagination",
            "default": 0
          }
        },
        "required": [
          "caseId"
        ]
      },
      "BaseCommonResultGetPaginatedCaseInternalNotesResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "notes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "caseId": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "authorId": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              },
              "totalCount": {
                "type": "integer"
              },
              "hasMore": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "GetPaginatedCaseInternalNotesResponse": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "caseId": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                },
                "authorId": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "totalCount": {
            "type": "integer"
          },
          "hasMore": {
            "type": "boolean"
          }
        }
      },
      "InternalNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "caseId": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReplyOutboundContactRequest": {
        "type": "object",
        "description": "Represents a request to send a reply email",
        "properties": {
          "emailMessage": {
            "description": "The body information of the email",
            "type": "object",
            "properties": {
              "subject": {
                "type": "string",
                "description": "The subject of the email"
              },
              "fromAddress": {
                "type": "string",
                "description": "The email address of the sender"
              },
              "fromName": {
                "type": "string",
                "description": "The name of the sender"
              },
              "toAddress": {
                "type": "string",
                "description": "The email address of the recipient"
              },
              "htmlTextBody": {
                "type": "string",
                "description": "The HTML text body of the email"
              },
              "plainTextBody": {
                "type": "string",
                "description": "The plain text body of the email"
              },
              "inReplyTo": {
                "type": "string",
                "description": "The message id to which this email is a reply"
              },
              "ccAddresses": {
                "type": "array",
                "description": "The list of email addresses to be included in the CC field",
                "items": {
                  "type": "string"
                }
              },
              "bccAddresses": {
                "type": "array",
                "description": "The list of email addresses to be included in the BCC field",
                "items": {
                  "type": "string"
                }
              },
              "s3Keys": {
                "type": "array",
                "description": "The list of the attachments' s3 keys",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "bccAddresses",
              "ccAddresses",
              "fromAddress",
              "fromName",
              "htmlTextBody",
              "s3Keys",
              "subject",
              "toAddress"
            ]
          },
          "contactGroupId": {
            "type": "string",
            "description": "Contact Group ID to be attached to the Contact",
            "example": "102454"
          }
        },
        "required": [
          "contactGroupId",
          "emailMessage"
        ]
      },
      "EmailMessageRequest": {
        "type": "object",
        "description": "Represents the email information to be sent",
        "properties": {
          "subject": {
            "type": "string",
            "description": "The subject of the email"
          },
          "fromAddress": {
            "type": "string",
            "description": "The email address of the sender"
          },
          "fromName": {
            "type": "string",
            "description": "The name of the sender"
          },
          "toAddress": {
            "type": "string",
            "description": "The email address of the recipient"
          },
          "htmlTextBody": {
            "type": "string",
            "description": "The HTML text body of the email"
          },
          "plainTextBody": {
            "type": "string",
            "description": "The plain text body of the email"
          },
          "inReplyTo": {
            "type": "string",
            "description": "The message id to which this email is a reply"
          },
          "ccAddresses": {
            "type": "array",
            "description": "The list of email addresses to be included in the CC field",
            "items": {
              "type": "string"
            }
          },
          "bccAddresses": {
            "type": "array",
            "description": "The list of email addresses to be included in the BCC field",
            "items": {
              "type": "string"
            }
          },
          "s3Keys": {
            "type": "array",
            "description": "The list of the attachments' s3 keys",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "bccAddresses",
          "ccAddresses",
          "fromAddress",
          "fromName",
          "htmlTextBody",
          "s3Keys",
          "subject",
          "toAddress"
        ]
      },
      "OutboundContactResponse": {
        "type": "object",
        "description": "Represents a response to send a reply email",
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Unique identifier for the created contact."
          },
          "emailMessageId": {
            "type": "string",
            "description": "Unique identifier for the created email message."
          },
          "contactGroupId": {
            "type": "string",
            "description": "Unique identifier for the created (or existing) contact group."
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "contactGroupId",
          "contactId",
          "emailMessageId"
        ]
      },
      "BaseCommonResultOutboundContactResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "description": "Represents a response to send a reply email",
            "properties": {
              "contactId": {
                "type": "string",
                "description": "Unique identifier for the created contact."
              },
              "emailMessageId": {
                "type": "string",
                "description": "Unique identifier for the created email message."
              },
              "contactGroupId": {
                "type": "string",
                "description": "Unique identifier for the created (or existing) contact group."
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "contactGroupId",
              "contactId",
              "emailMessageId"
            ]
          }
        }
      },
      "CRMEmailSelectionRequest": {
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string",
            "description": "The unique identifier of the case."
          },
          "bookingContactEmail": {
            "type": "string",
            "description": "The booking contact email of the case."
          }
        }
      },
      "BaseCommonResultCRMEmailSelectionResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "from": {
                "description": "Configuration for the \"from\" email header field.",
                "type": "object",
                "properties": {
                  "emails": {
                    "type": "array",
                    "description": "List of email address.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "to": {
                "description": "Configuration for the \"to\" email header field.",
                "type": "object",
                "properties": {
                  "emails": {
                    "type": "array",
                    "description": "List of email address.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "freeText": {
                    "type": "boolean"
                  }
                }
              },
              "cc": {
                "description": "Configuration for the \"cc\" email header field.",
                "type": "object",
                "properties": {
                  "emails": {
                    "type": "array",
                    "description": "List of email address.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "freeText": {
                    "type": "boolean"
                  }
                }
              },
              "bcc": {
                "description": "Configuration for the \"bcc\" email header field.",
                "type": "object",
                "properties": {
                  "emails": {
                    "type": "array",
                    "description": "List of email address.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "freeText": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "CRMEmailSelectionResponse": {
        "type": "object",
        "properties": {
          "from": {
            "description": "Configuration for the \"from\" email header field.",
            "type": "object",
            "properties": {
              "emails": {
                "type": "array",
                "description": "List of email address.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "to": {
            "description": "Configuration for the \"to\" email header field.",
            "type": "object",
            "properties": {
              "emails": {
                "type": "array",
                "description": "List of email address.",
                "items": {
                  "type": "string"
                }
              },
              "freeText": {
                "type": "boolean"
              }
            }
          },
          "cc": {
            "description": "Configuration for the \"cc\" email header field.",
            "type": "object",
            "properties": {
              "emails": {
                "type": "array",
                "description": "List of email address.",
                "items": {
                  "type": "string"
                }
              },
              "freeText": {
                "type": "boolean"
              }
            }
          },
          "bcc": {
            "description": "Configuration for the \"bcc\" email header field.",
            "type": "object",
            "properties": {
              "emails": {
                "type": "array",
                "description": "List of email address.",
                "items": {
                  "type": "string"
                }
              },
              "freeText": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "DestinationEmailSelectionData": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "List of email address.",
            "items": {
              "type": "string"
            }
          },
          "freeText": {
            "type": "boolean"
          }
        }
      },
      "EmailSelectionData": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "List of email address.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchCaseCategoryRequest": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "string",
            "description": "Attribute to contain keyword to be searched by Full text search.",
            "example": "refund"
          },
          "originCountry": {
            "type": "string",
            "description": "Origin country of the case or the problem that identified. The country should be in full name format.",
            "example": "Indonesia"
          },
          "productAffected": {
            "type": "string",
            "description": "Product affected by the case or the problem that identified. The product should be in code format that already defined in existing CRM.",
            "example": "AC-Hotel"
          },
          "recordType": {
            "type": "string",
            "description": "Record type of the case or the problem that identified.",
            "enum": [
              "PARTNER",
              "CUSTOMER",
              "AFFILIATE"
            ],
            "example": "CUSTOMER"
          },
          "customerPriority": {
            "type": "string",
            "description": "Customer priority of the case or the problem that identified.",
            "enum": [
              "VVIP",
              "VIP",
              "REGULAR"
            ],
            "example": "VVIP"
          }
        }
      },
      "BaseCommonResultSearchCaseCategoryResponse": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "errorType": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ],
                "enum": [
                  "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                  "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                  "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                  "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "discriminator": {
                      "propertyName": "type"
                    },
                    "properties": {
                      "httpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commonErrorType": {
                        "type": "string",
                        "enum": [
                          "CommonErrorType.SERVER_ERROR(httpStatusCode=500, message=Internal server error.)",
                          "CommonErrorType.INVALID_REQUEST(httpStatusCode=400, message=The request is invalid or malformed.)",
                          "CommonErrorType.NOT_FOUND(httpStatusCode=404, message=The requested resource was not found.)",
                          "CommonErrorType.DUPLICATE_RECORD(httpStatusCode=409, message=The record being requested already exists.)"
                        ]
                      }
                    }
                  }
                ]
              }
            ]
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "problemCategories": {
                "type": "array",
                "description": "List of problem categories matching the search criteria.",
                "items": {
                  "type": "object",
                  "properties": {
                    "problemId": {
                      "type": "string",
                      "description": "The unique identifier of the problem category details.",
                      "example": "info_refund_001"
                    },
                    "category1": {
                      "type": "string",
                      "description": "The first category of the problem category details.",
                      "example": "Info"
                    },
                    "category2": {
                      "type": "string",
                      "description": "The second category of the problem category details.",
                      "example": "Refund"
                    },
                    "category3": {
                      "type": "string",
                      "description": "The third category of the problem category details. Might be null.",
                      "example": "Delay"
                    },
                    "originCountry": {
                      "type": "string",
                      "description": "Origin country of the case or the problem that identified. The country should be in full name format.",
                      "example": "Indonesia"
                    },
                    "productAffected": {
                      "type": "string",
                      "description": "Product affected by the case or the problem that identified. The product should be in code format that already defined in existing CRM.",
                      "example": "AC-Hotel"
                    },
                    "recordType": {
                      "type": "string",
                      "description": "Record type of the case or the problem that identified.",
                      "enum": [
                        "PARTNER",
                        "CUSTOMER",
                        "AFFILIATE"
                      ],
                      "example": "CUSTOMER"
                    },
                    "customerPriority": {
                      "type": "string",
                      "description": "Customer priority of the case or the problem that identified.",
                      "enum": [
                        "VVIP",
                        "VIP",
                        "REGULAR"
                      ],
                      "example": "VVIP"
                    },
                    "targetSla": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The target sla of combination of the above attributes in minutes.",
                      "example": 1440
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SearchCaseCategoryResponse": {
        "type": "object",
        "properties": {
          "problemCategories": {
            "type": "array",
            "description": "List of problem categories matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "problemId": {
                  "type": "string",
                  "description": "The unique identifier of the problem category details.",
                  "example": "info_refund_001"
                },
                "category1": {
                  "type": "string",
                  "description": "The first category of the problem category details.",
                  "example": "Info"
                },
                "category2": {
                  "type": "string",
                  "description": "The second category of the problem category details.",
                  "example": "Refund"
                },
                "category3": {
                  "type": "string",
                  "description": "The third category of the problem category details. Might be null.",
                  "example": "Delay"
                },
                "originCountry": {
                  "type": "string",
                  "description": "Origin country of the case or the problem that identified. The country should be in full name format.",
                  "example": "Indonesia"
                },
                "productAffected": {
                  "type": "string",
                  "description": "Product affected by the case or the problem that identified. The product should be in code format that already defined in existing CRM.",
                  "example": "AC-Hotel"
                },
                "recordType": {
                  "type": "string",
                  "description": "Record type of the case or the problem that identified.",
                  "enum": [
                    "PARTNER",
                    "CUSTOMER",
                    "AFFILIATE"
                  ],
                  "example": "CUSTOMER"
                },
                "customerPriority": {
                  "type": "string",
                  "description": "Customer priority of the case or the problem that identified.",
                  "enum": [
                    "VVIP",
                    "VIP",
                    "REGULAR"
                  ],
                  "example": "VVIP"
                },
                "targetSla": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The target sla of combination of the above attributes in minutes.",
                  "example": 1440
                }
              }
            }
          }
        }
      },
      "ProblemCategory": {
        "type": "object",
        "properties": {
          "problemId": {
            "type": "string",
            "description": "The unique identifier of the problem category details.",
            "example": "info_refund_001"
          },
          "category1": {
            "type": "string",
            "description": "The first category of the problem category details.",
            "example": "Info"
          },
          "category2": {
            "type": "string",
            "description": "The second category of the problem category details.",
            "example": "Refund"
          },
          "category3": {
            "type": "string",
            "description": "The third category of the problem category details. Might be null.",
            "example": "Delay"
          },
          "originCountry": {
            "type": "string",
            "description": "Origin country of the case or the problem that identified. The country should be in full name format.",
            "example": "Indonesia"
          },
          "productAffected": {
            "type": "string",
            "description": "Product affected by the case or the problem that identified. The product should be in code format that already defined in existing CRM.",
            "example": "AC-Hotel"
          },
          "recordType": {
            "type": "string",
            "description": "Record type of the case or the problem that identified.",
            "enum": [
              "PARTNER",
              "CUSTOMER",
              "AFFILIATE"
            ],
            "example": "CUSTOMER"
          },
          "customerPriority": {
            "type": "string",
            "description": "Customer priority of the case or the problem that identified.",
            "enum": [
              "VVIP",
              "VIP",
              "REGULAR"
            ],
            "example": "VVIP"
          },
          "targetSla": {
            "type": "integer",
            "format": "int32",
            "description": "The target sla of combination of the above attributes in minutes.",
            "example": 1440
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "crm-client-focused: contact-management",
      "description": "Contact information and management operations"
    },
    {
      "name": "crm-client-focused: case-management",
      "description": "Case lifecycle operations"
    },
    {
      "name": "crm-client-focused: email-operations",
      "description": "Email communication features"
    },
    {
      "name": "crm-client-focused: contact-group-operations",
      "description": "Contact group centric operations"
    },
    {
      "name": "crm-client-focused: validation",
      "description": "Validation and lookup operations"
    },
    {
      "name": "crm-client-focused: legacy",
      "description": "Existing endpoints (unchanged for compatibility)"
    },
    {
      "name": "crm-client-focused: legacy-improved",
      "description": "Existing endpoints with DX improvements"
    },
    {
      "name": "crm-client-focused: client-focused",
      "description": "New standardized endpoints for client-side usage"
    }
  ]
}
